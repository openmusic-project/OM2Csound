; OM File Header - Saved 2010/10/25 14:21:19
; (6.030002 :patc (om-make-point 144 35) (om-make-point 672 140) (om-make-point 920 756) "non documentation" 183 0 nil "2010/10/25 14:21:19")
; End File Header
; External resources 
; (list (list (quote :text) "../../out-files/my-synth.orc"))
(in-package :om)(load-lib-for (quote ("OM2Csound")))(setf *om-current-persistent* (om-load-patch1 "02-csound-boxes" (quote ((om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 35 478) (om-make-point 70 50) (load-buffer-textfile (quote (" f  1	  0	  4096	  10	  1	 " " f  2	  0	  2048	  7	  .0450	  205	  .3130	  205	  .7460	  204	  1.0000	  205	  .8060	  205	  .3130	  205	  .2540	  205	  .3730	  204	  .1040	  410	  .0000	 " ";p1	p2	p3	p4	p5	p6	" " i  1	  0	  1	  10000	  440	  .5000	 " " i  1	  0	  1	  10000	  380	  .5000	 " " i  1	  .2000	  1	  10000	  440	  0	 " " i  1	  1.4000	  1	  10000	  680	  1	 " "e" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 589 470) (om-make-point 70 50) (load-textfile (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "my-synth" :type "orc") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote genfun) "WRITE-CSOUND-ORC 2" (quote write-csound-orc) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "filename" "OUT" (quote no-file) (list (list "text output" (quote (quote no-file))) (list "file output" (quote (quote file))))) (om-load-inputfun (quote input-funbox) "file header" "HEADER" "") (om-load-inputfun (quote input-funbox) "csound instrument" "INSTR" nil))) (om-make-point 498 385) nil nil nil nil 1) (om-load-boxcall (quote genfun) "WRITE-CSOUND-SCORE 2" (quote write-csound-score) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "filename" "OUT" (quote no-file) (list (list "text output" (quote (quote no-file))) (list "file output" (quote (quote file))))) (om-load-inputfun (quote input-funbox) "score data" "DATA" nil))) (om-make-point 85 394) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 86 26) (quote "ORCHESTRA") "" (om-make-point 631 425) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 52 26) (quote "SCORE") "" (om-make-point 268 335) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 181 38) (quote "Csound instrumet can be designed in simple red patches") "" (om-make-point 610 272) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 212 24) (quote "[use a list for multiple instruments]") "" (om-make-point 606 387) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "my-instrument-patch" (om-load-patch-abs1 "my-instrument-patch" (quote ((om-load-boxcomment "comment" (om-make-point 109 24) (quote "define instrument 1") "" (om-make-point 27 311) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 111 337) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 252 26) (om-make-point 28 30) (quote p3) "p3" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 164 27) (om-make-point 29 30) (quote p5) "p5" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 134 27) (om-make-point 28 30) (quote p4) "p4" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 95 27) (om-make-point 37 30) (quote asig) "asig" nil) (om-load-boxcall (quote genfun) "OSCIL 2" (quote oscil) (quote ((om-load-inputfun (quote input-funbox) "name" "NAME" (quote asig)) (om-load-inputfunmenu1 (quote input-funmenu) "opcode" "MODE" (quote oscili) (list (list "oscil" (quote (quote oscil))) (list "oscili" (quote (quote oscili))) (list "foscil" (quote (quote foscil))) (list "foscili" (quote (quote foscili))) (list "loscil" (quote (quote loscil))))) (om-load-inputfun (quote input-funbox) "amplitude" "XAMP" (quote p4)) (om-load-inputfun (quote input-funbox) "frequency (Hz)" "XCPS" (quote p5)) (om-load-inputfun (quote input-funbox) "table number" "IFN" 1))) (om-make-point 122 62) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 206 27) (om-make-point 28 30) (quote k1) "k1" nil) (om-load-boxcall (quote genfun) "TABLEI 2" (quote tablei) (quote ((om-load-inputfun (quote input-funbox) "name" "NAME" (quote k1)) (om-load-inputfunmenu1 (quote input-funmenu) "opcode" "MODE" (quote oscil1) (list (list "table" (quote (quote table))) (list "tablei" (quote (quote tablei))) (list "phasor" (quote (quote phasor))) (list "oscil1" (quote (quote oscil1))) (list "oscil1i" (quote (quote oscil1i))))) (om-load-inputfun (quote input-funbox) "indx" "INDX" 0) (om-load-inputfun (quote input-funbox) "ifn" "IFN" 1) (om-load-inputfun (quote input-funbox) "optional" "LST?" (quote p3)) (om-load-inputfun (quote input-funbox) "optional" "LST?" 2))) (om-make-point 219 58) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inst" (quote inst) (quote ((om-load-inputfun (quote input-funbox) "name" "NAME" 1) (om-load-inputfun (quote input-funbox) "assign-val" "VARBS" nil) (om-load-inputfun (quote input-funbox) "out" "OUT" nil))) (om-make-point 131 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "out" (quote out) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "opcode" "MODE" (quote outs) (list (list "out" (quote (quote out))) (list "outs" (quote (quote outs))) (list "outs1" (quote (quote outs1))) (list "outs2" (quote (quote outs2))))) (om-load-inputfun (quote input-funbox) "asig" "ASIG" (quote a1)) (om-load-inputfun (quote input-funbox) "optional" "LST?" nil))) (om-make-point 143 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MULTIPLY" (quote multiply) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote norm) (list (list "Norm" (quote (quote norm))) (list "left-part" (quote (quote left))) (list "rigth-part" (quote (quote rigth))))) (om-load-inputfun (quote input-funbox) "name1" "NAME1" nil) (om-load-inputfun (quote input-funbox) "name2" "NAME2" nil))) (om-make-point 145 145) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcomment "comment" (om-make-point 68 24) (quote "p6=balance") "" (om-make-point 249 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 251 35) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 276 35) (om-make-point 28 30) (quote p6) "p6" nil) (om-load-boxout "output1" 1 (om-make-point 190 214) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "ch2" nil) (om-load-boxcall (quote genfun) "MULTIPLY" (quote multiply) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote norm) (list (list "Norm" (quote (quote norm))) (list "left-part" (quote (quote left))) (list "rigth-part" (quote (quote rigth))))) (om-load-inputfun (quote input-funbox) "name1" "NAME1" nil) (om-load-inputfun (quote input-funbox) "name2" "NAME2" (quote p6)))) (om-make-point 43 139) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MINUS" (quote minus) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote norm) (list (list "Norm" (quote (quote norm))) (list "left-part" (quote (quote left))) (list "rigth-part" (quote (quote rigth))))) (om-load-inputfun (quote input-funbox) "name1" "NAME1" 1) (om-load-inputfun (quote input-funbox) "name2" "NAME2" (quote p6)))) (om-make-point 239 65) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MULTIPLY" (quote multiply) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote rigth) (list (list "Norm" (quote (quote norm))) (list "left-part" (quote (quote left))) (list "rigth-part" (quote (quote rigth))))) (om-load-inputfun (quote input-funbox) "name1" "NAME1" nil) (om-load-inputfun (quote input-funbox) "name2" "NAME2" nil))) (om-make-point 180 139) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 53 213) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "ch1" nil) (om-load-boxin "input" 0 (om-make-point 123 5) "no documentation" nil nil nil))) (quote ((6 0 3 0 nil 0) (8 0 4 1 nil 0) (1 0 5 1 nil 0) (2 0 5 2 nil 0) (8 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 7 0 nil 0))) 6.030002 nil "" (om-make-point 200 200) (om-make-point 360 325)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 136 217) (om-make-point 66 61) nil nil "balance") (om-load-boxout "output" 0 (om-make-point 127 450) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((5 0 6 0 nil 0) (4 0 6 2 nil 0) (3 0 6 3 nil 0) (7 0 8 0 nil 0) (2 0 8 4 nil 0) (1 0 9 0 nil 0) (10 0 9 2 nil 0) (12 0 10 1 nil 0) (12 1 10 2 nil 0) (6 0 11 1 nil 0) (8 0 11 2 nil 0) (11 0 12 0 nil 0) (9 0 13 0 nil 0))) 6.030002 nil "" (om-make-point 200 200) (om-make-point 341 549)) (quote nil) (om-make-point 602 302) nil nil nil "my-instrument-patch") (om-load-boxcomment "comment" (om-make-point 223 26) (quote "Score/Orchestra generation boxes") "" (om-make-point 106 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 331 142) (quote "Compatibility notes:$ $I-STATEMENTS now replaces the INSTRUMENT0 and INSTRUMENT1 and MAKE-OBJ-SND boxes from OM2Csound 1$$WRITE-CSOUND-ORC and WRITE-CSOUND-SCO replace the former EDITORC and EDITSCO functions$$Although their use is not recommended, the old boxes are still available and compatible in OM2Csound 2") "" (om-make-point 504 69) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "I-STATEMENTS" (quote i-statements) (quote ((om-load-inputfun (quote input-funbox) "instrument number" "INSTR" 1) (om-load-inputfun (quote input-funbox) "onset(s) [sec.]" "ONSETS" (list 0.2 1.4)) (om-load-inputfun (quote input-funbox) "duration(s) [sec.]" "DURS" (list 1 1)) (om-load-inputfun (quote input-funbox) "other synthesis parameters" "PARAMS" (list 10000 10000)) (om-load-inputfun (quote input-funbox) "other synthesis parameters" "PARAMS" (list 440 680)) (om-load-inputfun (quote input-funbox) "other synthesis parameters" "PARAMS" (list 0 1)))) (om-make-point 274 255) nil nil nil nil 1) (om-load-boxcall (quote genfun) "I-STATEMENTS" (quote i-statements) (quote ((om-load-inputfun (quote input-funbox) "instrument number" "INSTR" 1) (om-load-inputfun (quote input-funbox) "onset(s) [sec.]" "ONSETS" (list 0)) (om-load-inputfun (quote input-funbox) "duration(s) [sec.]" "DURS" (list 1)) (om-load-inputfun (quote input-funbox) "other synthesis parameters" "PARAMS" (list 10000 10000)) (om-load-inputfun (quote input-funbox) "other synthesis parameters" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "other synthesis parameters" "PARAMS" nil))) (om-make-point 189 231) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PARGEN05-07" (quote pargen05-07) (quote ((om-load-inputfun (quote input-funbox) "a BPF object" "BPF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "number of points" "PNTS" 2048) (om-load-inputfun (quote input-funbox) "min y value" "Y-MIN" 0) (om-load-inputfun (quote input-funbox) "max y value" "Y-MAX" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "NDEC" 3))) (om-make-point 83 153) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 271 200) (om-make-point 60 28) (list 0.5 0.5) "(0.5 0.5)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 221 145) (om-make-point 64 28) (list 440 380) "(440 380)" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 204 174) (om-make-point 40 28) (list 1 1) "(1 1)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 176 199) (om-make-point 40 28) (list 0 0) "(0 0)" nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 73 328) (om-make-point 183 43) nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 58 84) (om-make-point 158 50) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 10)) (quote (3 21 50 67 54 21 17 25 7 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 335 275) (om-make-point 10 40) 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "TABLE1" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 2) (om-load-inputfun (quote input-funbox) "ttab" "TTAB" 0) (om-load-inputfun (quote input-funbox) "points" "POINTS" 2048) (om-load-inputfun (quote input-funbox) "gen" "GEN" 7) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 512 512 1)))) (om-make-point 124 244) nil nil nil nil 1) (om-load-boxcall (quote genfun) "TABLE" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 1) (om-load-inputfun (quote input-funbox) "time" "TIME" 0) (om-load-inputfun (quote input-funbox) "size" "SIZE" 4096) (om-load-inputfun (quote input-funbox) "gen" "GEN" 10) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 1)))) (om-make-point 73 244) nil nil nil nil 1) (om-load-boxcall (quote genfun) "HEADER" (quote header) (quote ((om-load-inputfun (quote input-funbox) "sr" "SR" 44100) (om-load-inputfun (quote input-funbox) "kr" "KR" 4410) (om-load-inputfun (quote input-funbox) "ksmps" "KSMPS" 10) (om-load-inputfun (quote input-funbox) "nchnls" "NCHNLS" 2))) (om-make-point 528 294) nil nil nil nil 1) (om-load-editor-box1 "cs-synth.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 208 581) (om-make-point 177 77) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale player)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 870 497) (om-make-point 40 10) 0 1 (quote t) nil nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 309 434) (om-make-point 94 30) "cs-synth.aiff" "\"cs-synth.aiff\"" nil) (om-load-boxcall (quote genfun) "CSOUND-SYNTH" (quote csound-synth) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SCO" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil) (om-load-inputfun (quote input-funbox) "no documentation" "OUT-NAME" nil))) (om-make-point 291 506) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 168 44) (quote "OM2Csound 2.0") "" (om-make-point 105 16) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((3 0 0 1 nil 0) (2 0 1 1 nil 0) (22 0 2 1 nil 0) (8 0 2 2 nil 0) (18 0 3 1 nil 0) (17 0 12 1 nil 0) (16 0 12 2 nil 0) (15 0 12 4 nil 0) (14 0 12 5 nil 0) (19 0 13 0 nil 0) (21 0 18 0 nil 0) (20 0 18 1 nil 0) (12 0 18 2 nil 0) (11 0 18 3 nil 0) (13 0 20 4 nil 0) (25 0 23 0 nil 0) (3 0 25 0 nil 0) (2 0 25 1 nil 0) (24 0 25 2 nil 0))) nil 6.030002))
; OM File Header - Saved 2010/10/25 13:34:08
; (6.030002 :patc (om-make-point 75 107) (om-make-point 861 219) (om-make-point 1315 728) "No documentation " 183 0 nil "2010/10/25 12:56:12")
; End File Header
(in-package :om)(load-lib-for (quote ("OM2Csound")))(setf *om-current-persistent* (om-load-patch1 "03-tables+sampler" (quote ((om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1033 402) (om-make-point 28 30) 10 "10" nil) (om-load-boxcomment "comment" (om-make-point 141 30) (quote "sampling for gen10") nil (om-make-point 1000 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 318 93) (quote "=> ((f 1 0 4096 10 0.062 0.061 0.057 0.055 0.042 0.03 0.038 0.043 0.04 0.011 0.007 0.014 0.019 0.016 0.038 0.058 0.05 0.053 0.038 0.026 0.022 0.018 0.014 0.011 0.055 0.022 0.045 0.015 0.036 0.005))") nil (om-make-point 854 518) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 990 402) (om-make-point 38 28) 4096 "4096" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 963 402) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 928 403) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 932 257) (om-make-point 35 28) (quote sum) "sum" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 995 257) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 968 257) (om-make-point 26 28) 30 "30" nil) (om-load-boxcall (quote genfun) "SAMPLER" (quote sampler) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote max) (list (list "xfact" (quote (quote xfact))) (list "max" (quote (quote max))) (list "sum" (quote (quote sum))))) (om-load-inputfun (quote input-funbox) "nsamp" "NSAMP" 30) (om-load-inputfun (quote input-funbox) "xinit" "XINIT" 1) (om-load-inputfun (quote input-funbox) "xend" "XEND" 30) (om-load-inputfun (quote input-funbox) "oper" "OPER" 1) (om-load-inputfun (quote input-funbox) "ndec" "NDEC" 3))) (om-make-point 898 293) (om-make-point 199 61) nil nil nil 1) (om-load-boxcall (quote genfun) "TABLE" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 1) (om-load-inputfun (quote input-funbox) "time" "TIME" 0) (om-load-inputfun (quote input-funbox) "size" "SIZE" 4096) (om-load-inputfun (quote input-funbox) "gen" "GEN" 10) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 1)))) (om-make-point 897 432) (om-make-point 211 61) nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 907 105) (om-make-point 89 120) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30)) (quote (100 99 92 89 68 48 61 70 64 18 12 23 30 26 62 94 81 86 62 42 35 29 22 17 89 36 73 24 58 8)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems picture)) (list (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 445 103) (quote "=> ((f 1 0 1024 9 1.0 0.074 0 2.219 0.074 0 3.537 0.073 0 4.925 0.072 0 6.365 0.071 0 7.85 0.067 0 9.373 0.062 0 10.928 0.057 0 12.514 0.05 0 14.125 0.043 0 15.762 0.036 0 17.42 0.027 0 19.1 0.021 0 20.799 0.02 0 22.517 0.024 0 24.251 0.03 0 26.003 0.036 0 27.769 0.036 0 29.551 0.035 0 31.346 0.029 0 33.155 0.022 0 34.977 0.016 0 36.812 0.013 0 38.658 0.012 0))") nil (om-make-point 311 549) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 141 30) (quote "sampling for gen09") nil (om-make-point 642 305) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux15" (quote t) (quote nil) (om-make-point 469 118) (om-make-point 26 28) 24 "24" nil) (om-load-boxcall (quote bastype) "aux14" (quote t) (quote nil) (om-make-point 431 113) (om-make-point 36 28) 1.15 "1.15" nil) (om-load-boxcall (quote bastype) "aux13" (quote t) (quote nil) (om-make-point 409 115) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux12" (quote t) (quote nil) (om-make-point 457 213) (om-make-point 11 20) 3 "3" nil) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 515 443) (om-make-point 20 28) 9 "9" nil) (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 474 443) (om-make-point 38 28) 1024 "1024" nil) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 452 443) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 430 443) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 586 337) (om-make-point 26 28) 24 "24" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 553 337) (om-make-point 20 28) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 139 60) (quote "Generation of 24$partials with a $distortion of 1.15") "" (om-make-point 603 91) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 739 206) (om-make-point 20 28) 3 "3" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 703 206) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 661 205) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 631 206) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 547 207) (om-make-point 35 28) (quote sum) "sum" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 593 207) (om-make-point 26 28) 24 "24" nil) (om-load-boxcall (quote genfun) "TABLE" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 1) (om-load-inputfun (quote input-funbox) "time" "TIME" 0) (om-load-inputfun (quote input-funbox) "size" "SIZE" 1024) (om-load-inputfun (quote input-funbox) "gen" "GEN" 9) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 1)))) (om-make-point 424 475) (om-make-point 144 61) nil nil nil 1) (om-load-boxcall (quote genfun) "PARGEN09" (quote pargen09) (quote ((om-load-inputfun (quote input-funbox) "str" "PN" (list 1)) (om-load-inputfun (quote input-funbox) "pn" "STR" (list 1)) (om-load-inputfun (quote input-funbox) "phs" "PHS" 0) (om-load-inputfun (quote input-funbox) "Npart" "NPART" 24))) (om-make-point 468 366) (om-make-point 156 61) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 3))) (om-make-point 425 243) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAMPLER" (quote sampler) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" 0 (list (list "xfact" (quote (quote xfact))) (list "max" (quote (quote max))) (list "sum" (quote (quote sum))))) (om-load-inputfun (quote input-funbox) "nsamp" "NSAMP" 24) (om-load-inputfun (quote input-funbox) "xmin" "XINIT" 0) (om-load-inputfun (quote input-funbox) "xmax" "XEND" 100) (om-load-inputfun (quote input-funbox) "oper" "OPER" 1) (om-load-inputfun (quote input-funbox) "ndec" "NDEC" 3))) (om-make-point 491 234) (om-make-point 289 61) nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 506 80) (om-make-point 91 123) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 11 19 31 43 50 56 60 66 68 72 78 84 89 93 101)) (quote (100 99 95 76 50 30 26 30 43 48 50 47 36 26 18 16)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport picture)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 nil)) t nil nil nil) (om-load-boxcall (quote genfun) "INHARM-SER" (quote inharm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "distortion" "DIST" 1.15) (om-load-inputfun (quote input-funbox) "npart" "NPART" 24))) (om-make-point 412 149) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 157 34) (quote "SAMPLER + TABLE") nil (om-make-point 171 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 266 59) (quote "=> ((f 1 0 65 2 0 32 64 92 89 87 86 92 98 100 91 84 74 63 53 44 38 32 27 23 20 40 70 100 96 82 69 47 23 0))") nil (om-make-point 13 413) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 112 296) (om-make-point 21 30) 2 "2" nil) (om-load-boxcomment "comment" (om-make-point 141 30) (quote "sampling for gen02") nil (om-make-point 151 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 63 197) (om-make-point 36 28) (quote max) "max" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 241 198) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 201 198) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 170 197) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 139 198) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 102 197) (om-make-point 26 28) 30 "30" nil) (om-load-boxcall (quote genfun) "SAMPLER" (quote sampler) (quote ((om-load-inputfun (quote input-funbox) "bpf" "BPF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote max) (list (list "xfact" (quote (quote xfact))) (list "max" (quote (quote max))) (list "sum" (quote (quote sum))))) (om-load-inputfun (quote input-funbox) "nsamp" "NSAMP" 30) (om-load-inputfun (quote input-funbox) "xinit" "XINIT" 0) (om-load-inputfun (quote input-funbox) "xend" "XEND" 10) (om-load-inputfun (quote input-funbox) "oper" "OPER" 100) (om-load-inputfun (quote input-funbox) "ndec" "NDEC" 0))) (om-make-point 11 231) (om-make-point 271 61) nil nil nil 1) (om-load-boxcall (quote genfun) "TABLE" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 1) (om-load-inputfun (quote input-funbox) "time" "TIME" 0) (om-load-inputfun (quote input-funbox) "size" "SIZE" 65) (om-load-inputfun (quote input-funbox) "gen" "GEN" 2) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 1)))) (om-make-point 56 329) (om-make-point 97 67) nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 30 96) (om-make-point 84 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 9 10)) (quote (0 84 77 93 71 43 27 17 97 62 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict picture)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) nil)) t nil nil nil))) (quote ((11 0 9 0 nil 0) (6 0 9 1 nil 0) (8 0 9 2 nil 0) (7 0 9 3 nil 0) (5 0 10 0 nil 0) (4 0 10 1 nil 0) (3 0 10 2 nil 0) (0 0 10 3 nil 0) (9 0 10 4 nil 0) (21 0 31 0 nil 0) (20 0 31 1 nil 0) (19 0 31 2 nil 0) (18 0 31 3 nil 0) (32 0 31 4 nil 0) (33 0 32 0 nil 0) (34 0 32 1 nil 0) (23 0 32 2 nil 0) (22 0 32 3 nil 0) (36 0 33 0 nil 0) (17 0 33 1 nil 0) (35 0 34 0 nil 0) (29 0 34 1 nil 0) (30 0 34 2 nil 0) (28 0 34 3 nil 0) (27 0 34 4 nil 0) (26 0 34 5 nil 0) (25 0 34 6 nil 0) (16 0 36 0 nil 0) (15 0 36 1 nil 0) (14 0 36 2 nil 0) (49 0 47 0 nil 0) (41 0 47 1 nil 0) (46 0 47 2 nil 0) (45 0 47 3 nil 0) (44 0 47 4 nil 0) (43 0 47 5 nil 0) (42 0 47 6 nil 0) (39 0 48 3 nil 0) (47 0 48 4 nil 0))) nil 6.030002))

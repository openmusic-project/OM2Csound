; OM File Header - Saved 2010/10/25 14:21:30
; (6.030002 :patc (om-make-point 147 112) (om-make-point 534 115) (om-make-point 831 758) "" 183 0 nil "2010/10/25 14:21:30")
; End File Header
(in-package :om)(load-lib-for (quote ("OM2Csound")))(setf *om-current-persistent* (om-load-patch1 "04-score-example" (quote ((om-load-boxcomment "comment" (om-make-point 76 24) (quote "<= ms --> s") "" (om-make-point 576 188) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 149 223) (om-make-point 21 30) 7 "7" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 125 223) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 79 229) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 28 231) (om-make-point 21 30) 1 "1" nil) (om-load-editor-box1 "csound-ex.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 184 607) (om-make-point 266 71) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 408 444) (om-make-point 101 30) "csound-ex.aif" "\"csound-ex.aif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 379 473) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CSOUND-SYNTH" (quote csound-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SCO" nil) (om-load-inputfun (quote input-funbox) "" "ORC" nil) (om-load-inputfun (quote input-funbox) "" "OUT-NAME" nil))) (om-make-point 295 533) nil nil nil nil 1) (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 22 439) (om-make-point 71 63) (load-buffer-textfile (quote (" f  1	  0	  4096	  10	  1	 " " f  2	  0	  2048	  7	  .0380	  205	  .2660	  205	  .6330	  204	  .8480	  205	  1.0000	  205	  1.0000	  205	  .5700	  205	  .5190	  204	  .0890	  410	  .0000	 " ";p1	p2	p3	p4	p5	" " i  1	  .0000	  1.0710	  100	  246.9416	 " " i  1	  .0000	  1.0710	  100	  369.9944	 " " i  1	  .0000	  1.0710	  100	  587.3295	 " " i  1	  .0000	  1.0710	  100	  739.9888	 " " i  1	  1.0710	  1.0710	  100	  329.6276	 " " i  1	  1.0710	  1.0710	  100	  587.3295	 " " i  1	  1.0710	  1.0710	  100	  783.9908	 " " i  1	  2.1420	  1.0750	  100	  440.0000	 " " i  1	  2.1420	  1.0750	  100	  554.3653	 " " i  1	  2.1420	  .5370	  100	  739.9888	 " " i  1	  2.6790	  .5380	  100	  659.2551	 " " i  1	  3.2170	  1.6040	  100	  739.9888	 " " i  1	  3.2170	  1.6040	  100	  293.6648	 " " i  1	  3.2170	  1.6040	  100	  587.3295	 " " i  1	  4.8210	  .5370	  100	  659.2551	 " " i  1	  5.3580	  .5340	  100	  587.3295	 " " i  1	  5.8920	  .5370	  100	  554.3653	 " " i  1	  6.4290	  .5380	  100	  493.8833	 " " i  1	  6.4290	  1.0710	  100	  391.9954	 " " i  1	  6.9670	  .5330	  100	  659.2551	 " " i  1	  7.5000	  .5330	  100	  587.3295	 " " i  1	  7.5000	  1.0710	  100	  329.6276	 " " i  1	  8.0330	  .5380	  100	  554.3653	 " " i  1	  8.5710	  .5370	  100	  587.3295	 " " i  1	  8.5710	  1.0710	  100	  349.2282	 " " i  1	  9.1080	  .5340	  100	  493.8833	 " " i  1	  9.6420	  1.6080	  100	  466.1638	 " " i  1	  9.6420	  1.6080	  100	  369.9944	 " " i  1	  11.2500	  .5330	  100	  391.9954	 " " i  1	  11.7830	  .5380	  100	  369.9944	 " " i  1	  12.3210	  .5370	  100	  329.6276	 " " i  1	  12.8580	  .9250	  100	  293.6648	 " " i  1	  12.8580	  .9250	  100	  369.9944	 " " i  1	  12.8580	  .9250	  100	  493.8833	 " "e" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote genfun) "WRITE-CSOUND-SCORE" (quote write-csound-score) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "filename" "OUT" (quote no-file) (list (list "text output" (quote (quote no-file))) (list "file output" (quote (quote file))))) (om-load-inputfun (quote input-funbox) "score data" "DATA" nil) (om-load-inputfun (quote input-funbox) "more data" "MORE" (quote nim)) (om-load-inputfun (quote input-funbox) "more data" "MORE" (quote nim)))) (om-make-point 1 347) (om-make-point 247 67) nil nil nil 1) (om-load-boxcall (quote genfun) "PARGEN05-07" (quote pargen05-07) (quote ((om-load-inputfun (quote input-funbox) "a BPF object" "BPF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "number of points" "PNTS" 2048) (om-load-inputfun (quote input-funbox) "min y value" "Y-MIN" 0) (om-load-inputfun (quote input-funbox) "max y value" "Y-MAX" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "NDEC" 3))) (om-make-point 177 181) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 109 24) (quote "amplitude envelope") "" (om-make-point 164 92) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 223 26) (quote "SCORE FORMATTING - Example") "" (om-make-point 80 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 168 44) (quote "OM2Csound 2.0") "" (om-make-point 80 9) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 86 28) (quote "ORCHESTRA") "" (om-make-point 322 376) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 327 404) (om-make-point 59 57) (load-buffer-textfile (quote ("sr= 44100 " "kr= 441 " "ksmps= 100 " "nchnls= 1" " " "" " " "instr 1 " "iamp  =  ampdb(p4) " "idur  =  p3" "ifq1  =  p5" "a2  oscili  iamp,1/idur,2	" "a1  oscili  a2,ifq1,1	" "     out  a1" "    endin" "" "" "" "")) (quote textfile) "supersede" "text") "x" nil (pairlis (quote (show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0)) nil nil nil t) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 528 186) (om-make-point 42 28) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 474 186) (om-make-point 44 28) 1000.0 "1000.0" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 176 114) (om-make-point 83 56) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 10)) (quote (3 21 50 67 76 77 59 38 7 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 335 275) (om-make-point 10 40) 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "TABLE1" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 2) (om-load-inputfun (quote input-funbox) "ttab" "TTAB" 0) (om-load-inputfun (quote input-funbox) "points" "POINTS" 2048) (om-load-inputfun (quote input-funbox) "gen" "GEN" 7) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 512 512 1)))) (om-make-point 125 265) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1000))) (om-make-point 509 215) (om-make-point 45 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1000))) (om-make-point 457 215) (om-make-point 45 35) nil nil nil 1) (om-load-boxcall (quote genfun) "TABLE" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 1) (om-load-inputfun (quote input-funbox) "time" "TIME" 0) (om-load-inputfun (quote input-funbox) "size" "SIZE" 4096) (om-load-inputfun (quote input-funbox) "gen" "GEN" 10) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 1)))) (om-make-point 59 265) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 61 24) (quote "CHORDSEQ") "" (om-make-point 320 69) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "midic" "MIDICS?" 6000))) (om-make-point 398 204) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAKE-OBJ-SND" (quote make-obj-snd) (quote ((om-load-inputfun (quote input-funbox) "Lins" "LINS" 1) (om-load-inputfun (quote input-funbox) "Lonsets" "LDATS" (list 1)) (om-load-inputfun (quote input-funbox) "Ldurs" "LDURS" (list 1)) (om-load-inputfun (quote input-funbox) "Lp4" "LP4" (list 1)) (om-load-inputfun (quote input-funbox) "Lp5" "LP5" (list 440)))) (om-make-point 318 279) (om-make-point 298 67) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 318 95) (om-make-point 469 92) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6600 7400 7800) (6400 7400 7900) (6900 7300 7800) (7600) (7800 6200 7400) (7600) (7400) (7300) (7100 6700) (7600) (7400 6400) (7300) (7400 6500) (7100) (7000 6600) (6700) (6600) (6400) (6200 6600 7100))) :lonset (quote (0 1071 2142 2679 3217 4821 5358 5892 6429 6967 7500 8033 8571 9108 9642 11250 11783 12321 12858 13395)) :ldur (quote ((1071 1071 1071 1071) (1071 1071 1071) (1075 1075 537) (538) (1604 1604 1604) (537) (534) (537) (538 1071) (533) (533 1071) (538) (537 1071) (534) (1608 1608) (533) (538) (537) (925 925 925))) :lvel (quote ((100 100 100 100) (100 100 100) (100 100 100) (100) (100 100 100) (100) (100) (100) (100 100) (100) (100 100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0))) :lchan (quote ((4 3 2 1) (3 2 1) (3 2 1) (1) (1 3 2) (1) (1) (1) (1 3) (1) (1 3) (1) (1 3) (1) (1 3) (1) (1) (1) (1 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.030002 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 nil nil)) t nil nil nil))) (quote ((8 0 5 0 nil 0) (6 0 7 0 nil 0) (10 0 8 0 nil 0) (16 0 8 1 nil 0) (7 0 8 2 nil 0) (10 0 9 1 nil 0) (23 0 10 1 nil 0) (20 0 10 2 nil 0) (26 0 10 3 nil 0) (19 0 11 0 nil 0) (2 0 20 0 nil 0) (1 0 20 3 nil 0) (11 0 20 4 nil 0) (27 3 21 0 nil 3) (17 0 21 1 nil 0) (27 2 22 0 nil 1) (18 0 22 1 nil 0) (4 0 23 0 nil 0) (3 0 23 3 nil 0) (27 1 25 0 nil 2) (22 0 26 1 nil 1) (21 0 26 2 nil 3) (27 4 26 3 nil 4) (25 0 26 4 nil 2))) nil 6.030002))
; OM File Header - Saved 2010/10/25 14:21:02
; (6.030002 :patc (om-make-point 17 112) (om-make-point 529 150) (om-make-point 805 687) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OM2Csound")))(setf *om-current-persistent* (om-load-patch1 "03-OMscore2Csound" (quote ((om-load-boxcomment "comment" (om-make-point 100 87) (quote "set <out> to 'no-file in order to output simple lines list and visualize in a textfile") nil (om-make-point 124 449) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 168 44) (quote "OM2Csound 2.0") "" (om-make-point 103 27) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 223 26) (quote "MAKE-OBJ-SND") "" (om-make-point 104 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "WRITE-CSOUND-SCORE 2" (quote write-csound-score) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "filename" "OUT" (quote no-file) (list (list "text output" (quote (quote no-file))) (list "file output" (quote (quote file))))) (om-load-inputfun (quote input-funbox) "score data" "DATA" nil))) (om-make-point 224 457) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 261 84) (quote "MAKE-OBJ-SND adapts the different parameters to the list provided in 'p5'$$This allows to handle and format chords or sequences with same parameter values ") "" (om-make-point 28 102) nil (om-make-color 0 0 0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 230 547) (om-make-point 124 61) (load-buffer-textfile (quote (";p1	p2	p3	p4	p5	" " i  1	  0	  3	  80	  195.9977	 " " i  1	  5	  3	  75	  369.9944	 " " i  1	  5	  3	  75	  698.4565	 " " i  1	  5	  3	  75	  538.5836	 " " i  1	  10	  3	  70	  65.4064	 " " i  1	  10	  3	  70	  123.4708	 " " i  1	  10	  3	  70	  179.7307	 " " i  1	  10	  3	  70	  339.2864	 " " i  1	  15	  3	  65	  1209.0792	 " " i  1	  15	  3	  65	  1108.7306	 " " i  1	  15	  3	  65	  1016.7104	 " " i  1	  15	  3	  65	  659.2551	 " " i  1	  15	  3	  65	  452.8930	 " "e" "")) (quote textfile) "supersede" "text") "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0))) nil nil nil nil) (om-load-boxcomment "comment111" (om-make-point 78 28) (quote "dynamics (db)") "" (om-make-point 331 254) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 31 28) (quote "durs") "" (om-make-point 295 218) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 42 28) (quote "onsets") "" (om-make-point 228 234) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 31 28) (quote "instr") "" (om-make-point 192 275) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 215 261) (om-make-point 72 28) (list 0 5 10 15) "(0 5 10 15)" nil) (om-load-boxcomment "comment" (om-make-point 214 55) (quote "FREQUENCIES:$((196) (370 698 539) (65 123 180 339) (1209 1109 1017 659 453))") "" (om-make-point 464 255) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "midic" "MIDICS?" 6000))) (om-make-point 428 275) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 402 124) (om-make-point 229 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (6600 7700 7250) (3600 4700 5350 6450) (8650 8500 8350 7600 6950))) :lonset (quote (0 833 1771 2833 3895)) :ldur (quote ((1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100) (100 100 100) (100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0) (0 0 0) (0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1) (1 1 1) (1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0) (0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom deltapict cmnpref staff fontsize approx outport inport microplay scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 323 282) (om-make-point 84 28) (list 80 75 70 65) "(80 75 70 65)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 301 245) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 296) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "MAKE-OBJ-SND" (quote make-obj-snd) (quote ((om-load-inputfun (quote input-funbox) "Lins" "LINS" (list 1)) (om-load-inputfun (quote input-funbox) "Lonsets" "LDATS" (list 1)) (om-load-inputfun (quote input-funbox) "Ldurs" "LDURS" (list 1)) (om-load-inputfun (quote input-funbox) "Lp4" "LP4" (list 1)) (om-load-inputfun (quote input-funbox) "Lp5" "LP5" (list 440)))) (om-make-point 194 345) (om-make-point 220 61) nil nil nil 1))) (quote ((17 0 3 1 nil 0) (3 0 5 1 nil 0) (13 1 12 0 nil 0) (16 0 17 0 nil 0) (10 0 17 1 nil 0) (15 0 17 2 nil 0) (14 0 17 3 nil 0) (12 0 17 4 nil 0))) nil 6.030002))

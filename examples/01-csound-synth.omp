; OM File Header - Saved 2010/10/25 14:21:12
; (6.030002 :patc (om-make-point 31 35) (om-make-point 648 118) (om-make-point 745 483) "non documentation" 183 0 nil "2010/10/25 14:21:12")
; End File Header
(in-package :om)(load-lib-for (quote ("OM2Csound")))(setf *om-current-persistent* (om-load-patch1 "01-csound-synth" (quote ((om-load-boxcomment "comment" (om-make-point 327 105) (quote "Connect to CSOUND-SYNTH:$$- pathnames to SCORE and ORCHESTRA files$- TEXTFILEs containing Csound code$- Csound score/orchestra text line lists") "" (om-make-point 342 241) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 122 26) (quote "Csound Synthesis") "" (om-make-point 188 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 168 44) (quote "OM2Csound 2.0") "" (om-make-point 190 10) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 52 26) (quote "SCORE") "" (om-make-point 76 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 86 26) (quote "ORCHESTRA") "" (om-make-point 169 111) nil (om-make-color 0 0 0) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "textfile" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 77 136) (om-make-point 70 50) (load-buffer-textfile (quote (" f  1	  0	  4096	  10	  1	 " " f  2	  0	  2048	  7	  .0450	  205	  .3130	  205	  .7460	  204	  1.0000	  205	  .8060	  205	  .3130	  205	  .2540	  205	  .3730	  204	  .1040	  410	  .0000	 " ";p1	p2	p3	p4	p5	p6	" " i  1	  0	  1	  10000	  440	  .5000	 " " i  1	  0	  1	  10000	  380	  .5000	 " " i  1	  .2000	  1	  10000	  440	  0	 " " i  1	  1.4000	  1	  10000	  680	  1	 " "e" "" "")) (quote textfile) "append" "text") "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-editor-box1 "textfile" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 175 136) (om-make-point 70 50) (load-buffer-textfile (quote ("sr= 44100 " "kr= 4410 " "ksmps=  10 " "nchnls= 2" " " "" " " "instr 1 " "k1  oscil1  0	,1	,p3,2	" "asig  oscili  p4,p5,1	" "     outs  asig*k1*p6,asig*k1*(1-p6)" "    endin" "" "" "")) (quote textfile) "append" "text") "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 267 48) (quote "!!! First install Csound and check Csound path in Preferences") "" (om-make-point 310 99) nil (om-make-color 0.61085976 0.26018286 0.18046659) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 107 41) (quote "output sound file name") "" (om-make-point 246 188) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 196 230) (om-make-point 109 30) "csound-text.aif" "\"csound-text.aif\"" nil) (om-load-editor-box1 "csound-simple" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 89 338) (om-make-point 211 67) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 781 320) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "CSOUND-SYNTH" (quote csound-synth) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SCO" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil) (om-load-inputfun (quote input-funbox) "no documentation" "OUT-NAME" "csound-simple.aiff"))) (om-make-point 145 262) nil nil nil nil 1))) (quote ((11 0 10 0 nil 0) (5 0 11 0 nil 0) (6 0 11 1 nil 0) (9 0 11 2 nil 0))) nil 6.030002))